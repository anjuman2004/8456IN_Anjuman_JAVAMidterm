***ANSWER ALL QUESTIONS BELOW***

Why do we need data structure?
Answer:Data Structure can be defined as the group of data elements which provides an efficient way of
storing and organising data in the computer so that it can be used efficiently.

What are the various operations that can be performed on different data structures?
Answer:There are 8 operations that can be performed on Data Structures. These are:
       1. Creation: Creating a data structure according to the requirement.
                          eg: an integer array of 5 values.
                                         int ar[5];   //ar is the name of array
       2. Insertion: Inserting values into data structure. There can be three ways to insert elements into data structure: at the beginning, at the end and at the desired locaiton.
       3. Traversal: Visiting each element of the data structure at least once.
       4. Search: Searching of an element in the given number of elements. The elements can be searched in two ways:
                a. Linear Search: Simplest way of searching an element.
                b. Binary Search: It works on divide and conquer rule.
       5. Sorting: Rearranging the elements in a paritcular order, ascending or descending order. There are several sorting algorithms:
               a. Bubble Sort
               b. Selection Sort
               c. Quick Sort
               d. Merge Sort
               e. Heap Sort
       6. Merging: Combining the data items of two sorted files into single file in the sorted form.
       7. Updation: Updating the current value in the data structure with some new value.
       8. Deletion: Deleting the undesired value from the data structure. There are 3 ways to delete a value from data structure. These are: from the beginning, from the end and from the given location.

When would we use data structures in the real world?
Answer:

What is an Array?
Answer:Arrays are used to store multiple values in a single variable, instead of declaring separate
variables for each value.

What is the difference between Array and ArrayList?
Answer:An array is basic functionality provided by Java. ArrayList is part of collection framework in
Java. Therefore array members are accessed using [], while ArrayList has a set of methods to access
elements and modify them.

What is a LinkedList?
Answer: LinkedList is a linear data structure. LinkedList elements are not stored in contiguous
locations like arrays, they are linked with each other using pointers. Each element of the LinkedList
has the reference(address/pointer) to the next element of the LinkedList.

How is an Array different from LinkedList?
Answer:An array is a collection of elements of a similar data type. A linked list is a collection of
 objects known as a node where node consists of two parts, i.e., data and address. Array elements store
  in a contiguous memory location. Linked list elements can be stored anywhere in the memory or randomly
  stored.

What is a Queue?
Answer:Queue is an abstract data structure, somewhat similar to Stacks. Unlike stacks, a queue is open
at both its ends. One end is always used to insert data (enqueue) and the other is used to remove data
(dequeue).

What is a Stack (not Java memory - refers to data structure)?
Answer:Stack is an abstract data type with a bounded(predefined) capacity. It is a simple data structure
 that allows adding and removing elements in a particular order. Every time an element is added, it goes
  on the top of the stack and the only element that can be removed is the element that is at the top of
  the stack, just like a pile of objects.

What is FIFO and LIFO?
Answer:FIFO and LIFO are methods used in the cost of goods sold calculation.FIFO (“First-In,
First-Out”) assumes that the oldest products in a company’s inventory have been sold first and goes by
 those production costs. The LIFO (“Last-In, First-Out”) method assumes that the most recent products
 in a company’s inventory have been sold first and uses those costs instead.

Explain Big O Notation?
Answer: Big O notation is used in Computer Science to describe the performance or complexity of an
algorithm. Big O specifically describes the worst-case scenario, and can be used to describe the
execution time required or the space used (e.g. in memory or on disk) by an algorithm.


What is the best case to search an element from an array?
Answer:For a list with n items, the best case is when the value is equal to the first element of the
list, in which case only one comparison is needed.

What is the worst case to search an element from an array?
Answer:The worst case is when the value is not in the list (or occurs only once at the end of the list),
 in which case n comparisons are needed.

Describe what a tree data structure is?
Answer:A tree is a nonlinear data structure, compared to arrays, linked lists, stacks and queues which
 are linear data structures. A tree can be empty with no nodes or a tree is a structure consisting of
  one node called the root and zero or one or more subtrees.

Describe what a graph data structure is?
Answer:A tree is a hierarchical data structure defined as a collection of nodes. Nodes represent value
 and nodes are connected by edges. A tree has the following properties:

       The tree has one node called root. The tree originates from this, and hence it does not have any
        parent.
       Each node has one parent only but can have multiple children.
       Each node is connected to its children via edge.

What is the difference between the HashTable and HashMap?
Answer:1) HashMap is non synchronized. It is not-thread safe and can't be shared between many threads
without proper synchronization code. Hashtable is synchronized. It is thread-safe and can be shared
with many threads.
2) HashMap allows one null key and multiple null values. Hashtable doesn't allow any null key or value.
3) HashMap is a new class introduced in JDK 1.2. Hashtable is a legacy class.
4) HashMap is fast.	Hashtable is slow.

What are the major data structures used in the following areas : RDBMS, Network data model and Hierarchical data model
Answer:RDBMS - Array, Network data- Graph and Hierarchical data - Tree.

How do HashMaps work in Java? How do they store values, and when are they useful?
Answer:A HashMap is a map used to store mappings of key-value pairs. HashMap in Java works on hashing
principles. It is a data structure which allows us to store object and retrieve it in constant time O(1) provided we know the key.

What is ArrayIndexOutOfBoundsException in java? When does it occur?
Answer:

What are the different ways of copying an array into another array?
Answer:

What is DFS and BFS?
Answer:BFS stands for Breadth First Search. DFS stands for Depth First Search. BFS(Breadth First
 Search) uses Queue data structure for finding the shortest path. DFS(Depth First Search) uses Stack data
  structur.

What is Recursion?
Answer:Recursion is the technique of making a function call itself. This technique provides a way to
break complicated problems down into simple problems which are easier to solve

What are linear and non-linear data Structures?
Answer: A linear data structure is a data structure that has data elements in sequential order. In a
linear data structure, the adjacent elements are attached to each other. However, these data structures
 do not make better utilization of memory. Therefore, it can lead to memory wastage.
Non Linear data structure stores data in a non-sequential manner. It forms a hierarchical relationship
among the child elements and parent elements. In other words, the data items are attached to each
other creating a relationship between them. It is not possible to insert elements, delete elements
or go through the elements in sequential order. Usually, these data structures are more memory
 efficient. Trees and graphs are the most common nonlinear data structures.

Outline different sorting algorithms and their time complexities:


Draw a table with time complexity in which it will summarize all the data structure feature's advantages and disadvantages.
  a) In terms of Accessing elements:
  b) In terms of Inserting elements:
  c) In terms of Searching elements:
  d) In terms of Removing elements: