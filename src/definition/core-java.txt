***ANSWER ALL QUESTIONS BELOW***

What is a programming language?
Answer:A programming language is a computer language programmers use to develop software programs, scripts, or other
sets of instructions for computers to execute.

What is a JDK composed of? Define each components?
Answer:
The JDK includes the Java Runtime Environment (JRE), an interpreter (java), a compiler (javac), an archiver (jar),
a documentation generator (javadoc), and some other development tools. The Java Runtime Environment itself consists of
the Java Virtual Machine (JVM), supporting files, and core classes.

JRE: The Java Runtime Environment provides the minimum requirements for executing a Java application; it consists of the
Java Virtual Machine (JVM), core classes, and supporting files.

Compiler: A compiler takes the Java code and turns that code into something that can run on the computer.

JVM: Java Virtual machine(JVM) is a very important part of both JDK and JRE because it is contained or inbuilt in both.
Whatever Java program we run using JRE or JDK goes into JVM and JVM is responsible for executing the java program line
by line hence it is also known as interpreter.

JavaDoc: is a document generator tool in Java programming language for generating standard documentation in HTML format.
It generates API documentation. It parses the declarations ad documentation in a set of source file describing classes,
methods, constructors, and fields.

What is an IDE?
Answer:
An integrated development environment (IDE) is an application that facilitates application development. IDEs are
designed to encompass all programming tasks in one application. Therefore, IDEs offer a central interface featuring all
the tools a developer needs, including Code editor, Compiler, Build automation tools.


What are some of the most popular Java IDEs available in the market?
Answer: The most popular Java IDEs is Eclipse, Intellij, NetBeans, JDeveloper,MyEclipse,BlueJ, JCreator,Drjava,
jGRASP, jSource.

Explain the entire java life cycle.
Answer:Life cycle of a java program tells us what happens right from the point when we type source code
 in a text editor to the point that source code is converted into machine code.

What is a class?
Answer:: A class is a blueprint that defines the variables and the methods common to all objects of a
certain kind

What is an object?
Answer:A Java object is a self-contained component which consists of methods and properties to make certain type
of data useful.

What is the entry point of an application?
Answer:An application entry point identifies a resource that is an access point to an application.
In computer programming, an entry point is where the first instructions of a program are executed,
and where the program has access to command line arguments. To start a program's execution, the loader
or operating system passes control to its entry point.

Why is the main() static?
Answer:Java program's main method has to be declared static because keyword static allows main to be called
without creating an object of the class in which the main method is defined. ... Without having declared
main method static , your program will successfully compile but won't execute and report error at run time.

Which class is the superclass of all classes?
Answer:The class named Object is the super class of every class.

What is difference between path and classpath variables?
Answer:Path and classpath both are operating system level environment variable.Path is used define where
the system can find the executables(.exe) files and classpath is used to specify the location.class files.

What is the difference between an Interface and Abstract class?

Answer:An abstract class is meant to be inherited by a child class. It contains abstract methods (no body),
that are meant to be over-ridden by the child class. An abstract class can ALSO contain non-abstract
methods - This is why abstract classes are not 100% abstract

INTERFACES ARE 100% ABSTRACT BY NATURE.
 We cannot create objects of (instantiate) interfaces (just like we can't instantiate abstract classes)
 All methods within an interface MUST be abstract
 All variables within an interface are implicitly FINAL (constant)
 We must always initialize the variables within an interface, as they are constant and cannot
 be re-assigned elsewhere.



Can you make an Object from an Interface and Abstract class? If yes or no, how would you do it?
Answer:

What is Access Modifier?
Answer:Access modifiers are keywords in object-oriented languages that set the accessibility of classes,
methods, and other members. Access modifiers are a specific part of programming language syntax used to
facilitate the encapsulation of components.

What is OOP? Define each OOP concept.
Answer:  Object-Oriented Programming System (OOPs) is a programming concept that works on the principles of abstraction, encapsulation, inheritance, and polymorphism. It allows users to create objects they want and create methods to handle those objects. The basic concept of OOPs is to create objects, re-use them throughout the program, and manipulate these objects to get results.
What is Java Package and which package is imported by default?
Answer:A package is a namespace that organizes a set of related classes and interfaces.
Java compiler imports java.lang package internally by default. It provides the fundamental classes that are necessary
to design a basic Java program. The important classes are Object, which is the root of the class hierarchy, and Class, instances of which represent classes at run time.
What is an API? List some API's that you have used so far.
Answer:API is the acronym for Application Programming Interface, which is a software intermediary that allows two applications to talk to each other.
Skyscanner, Facebook,Weather,Massenger,Instragram,Paypal,Viber,Skype,Google map,Yahoo Finance,
Does java support multiple inheritance? Why or why not?
Answer:No java does not support Multiple Inheritance directly because it leads Method overriding extended same class and same method name. java doesnt support multiple inheritance but through interface java supports multipleinheritance

What is method overloading and when does it happen?
Answer:Method Overloading is a feature that allows a class to have more than one method having the same
        name, if their argument lists are different
        Overloading occurs when two or more methods in one class have the same method name but different
        parameters. Must have at least two methods by the same name in the class.

Explain exceptions in java and how to handle them.
Answer:An exception is an event, which occurs during the execution of a program, that disrupts the normal
        flow of the program's instructions.Java provides two different options to handle an exception.
        1.Try-Catch-Finally:
           * A try block that encloses the code section which might throw an exception,
           * One or more catch blocks that handle the exception and
           * A finally block which gets executed after the try block was successfully executed or a thrown
             exception was handled.
         2.The Try Block:
           * Use a separate try block for each statement that could throw an exception or
           * Use one try block for multiple statements that might throw multiple exceptions.

What is static keyword? When and how do we use it?
Answer:static is a non-access modifier in Java which is applicable for the following:
       *blocks
       *variables
       *methods
       *nested classes
    To create a static member(block,variable,method,nested class), precede its declaration with the keyword
static. When a member is declared static, it can be accessed before any objects of its class
are created, and without reference to any object.

What is final keyword? When and how do we use it?
Answer:The final keyword is a non-access modifier used for classes, attributes and methods, which makes
    them non-changeable (impossible to inherit or override). The final keyword is useful when you want a
    variable to always store the same value, like PI (3.14159...).

Explain the difference between final, finally and finalize?

Answer:Final class can't be inherited, final method can't be overridden and final variable value can't
be changed. Finally is used to place important code, it will be executed whether exception is handled
or not. Finalize is used to perform clean up processing just before object is garbage collected. Final is a keyword.
Finally is a block.	Finalize is a method.

What is a constructor?
Answer:A constructor in Java is a special method that is used to initialize objects. The constructor is
called when an object of a class is created.

Can we have multiple constructors in a class?
Answer:There can be multiple constructors in a class. However, the parameter list of the constructors
should not be same. This is known as constructor overloading.

If we don't have a constructor declared, what is called during the object creation?
Answer:All classes have at least one constructor. If a class does not explicitly declare any, the Java
compiler automatically provides a no-argument constructor, called the default constructor.

What is "this" keyword in Java? When would we use it?
Answer:The this keyword refers to the current object in a method or constructor.
       The most common use of the this keyword is to eliminate the confusion between class attributes
       and parameters with the same name (because a class attribute is shadowed by a method or
       constructor parameter).

What is "super" keyword in Java? What are some scenarios we would use it?
Answer:The super keyword in java is a reference variable that is used to refer parent class objects.
        The keyword “super” came into the picture with the concept of Inheritance. It is majorly used
        in the following contexts:
        1. Use of super with variables: This scenario occurs when a derived class and base class
        has same data members. In that case there is a possibility of ambiguity for the JVM.
        2. Use of super with methods: This is used when we want to call parent class method. So whenever
         a parent and child class have same named methods then to resolve ambiguity we use super keyword.
        3. Use of super with constructors: super keyword can also be used to access the parent class
        constructor. One more important thing is that, ‘’super’ can call both parametric as well as non
        parametric constructors depending upon the situation.
        4.Other Important points:
          * Call to super() must be first statement in Derived(Student) Class constructor.
          * If a constructor does not explicitly invoke a superclass constructor, the Java compiler automatically inserts
           a call to the no-argument constructor of the superclass. If the superclass does not have a no-argument constructor, you will get a compile-time error.
            Object does have such a constructor, so if Object is the only superclass, there is no problem.
          * If a subclass constructor invokes a constructor of its superclass, either explicitly or
            implicitly, you might think that a whole chain of constructors called, all the way back to the
            constructor of Object.

What does JVM stand for?
Answer: Java Virtual Machine.

Is JVM platform independent?
Answer:The JVM is not platform independent. Java Virtual Machine (JVM) provides the environment to
     execute the java file(. Class file). So at the end it's depends on your kernel , and kernel is differ
     from OS (Operating System) to OS. The JVM is used to both translate the bytecode into the machine
     language for a particular computer, and actually execute the corresponding machine-language instructions as well.
     Without the JVM, you can’t run a Java application

What version of Java are you using?
Answer:I am using version  11.0.10 of Java.

What does JAR stand for?
Answer:JAR stands for Java ARchive.

What is the difference between JDK and JVM?
Answer:JDK is Java Development Kit and JVM is Java Virtual Machine. JDK contains JVM and whole other
    tools for java development inside it. JVM converts bytecode to machine code and execute it on machine.
    There is no matching functionality between JDK and JVM.

What is the difference between JVM and JRE?
Answer:JRE is the container, JVM is the content. Java Runtime Environment contains JVM, class libraries,
        and other supporting files. It does not contain any development tools such as compiler, debugger,
         etc. ... JRE = JVM + Java Packages Classes (like util, math, lang, awt, swing etc) + runtime libraries.

Explain the difference between compile-time and run-time?
Answer:Compile-time is the instance where the code you entered is converted to executable while Run-time
        is the instance where the executable is running. The terms "runtime" and "compile time" are
         often used by programmers to refer to different types of errors too.

What is heap?
Answer:The heap is a memory used by programming languages to store global variables. By default, all
        global variable are stored in heap memory space. It supports Dynamic memory allocation

How does Java manage its memory?
Answer:In Java, memory management is the process of allocation and de-allocation of objects, called
        Memory management. Java does memory management automatically. Java uses an automatic memory management
        system called a garbage collector. Thus, we are not required to implement memory management logic in our
        application. Java memory management divides into two major parts:
            *JVM Memory Structure
            *Working of the Garbage Collector

What is the difference between String, StringBuffer and StringBuilder?
Answer:
        1. String is immutable whereas StringBuffer and StringBuilder are mutable classes.
        2. StringBuffer is thread-safe and synchronized whereas StringBuilder is not. That’s why
           StringBuilder is faster than StringBuffer.
        3. String concatenation operator (+) internally uses StringBuffer or StringBuilder class.
        4. For String manipulations in a non-multi threaded environment, we should use StringBuilder
            else use StringBuffer class.

What is Singleton class?
Answer:In object-oriented programming, a singleton class is a class that can have only one object
        (an instance of the class) at a time.

What is Serialization and Deserialization?
Answer:

Explain the difference between While and Do..While loops?
Answer:

What is Enum?
Answer:

What is Iterator?
Answer:

Which one will take more memory: an int or Integer? Why?
Answer:

Why are Strings considered to be immutable in Java?
Answer:

What is constructor chaining in Java?
Answer:

The difference between Serial and Parallel Garbage Collector?
Answer:

What does JIT stands for?
Answer:

Explain the process of Java garbage collection?
Answer:

Can you guarantee the garbage collection process?
Answer:

What is the difference between stack and heap in Java?
Answer:

What is reflection in Java and why is it useful?
Answer:

What is multithreading in Java?
Answer:

What is synchronization in Java?
Answer:

What is a Framework?
Answer:

What are the testing Frameworks available in Java?
Answer:

What are jUnit and testNG?
Answer:

What are the dependencies for this project?
Answer:

What is dependency injection in Java?
Answer:

Explain what static binding and dynamic binding is?
Answer: